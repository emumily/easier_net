"""
Runs the experiments comparing EASIER-net to other methods on the CuMiDa datasets.

Before running the analysis, download and process the data:
1. Run cumida/download_cumida.sh to download datasets
2. Run load_cumida.py to convert all the downloaded datasets into the correct format.
"""
import os
import json

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

KFOLD = 3
with open("datasets.json", "r") as f:
    DATA_DICT = json.load(f)

NUM_INITS = 5
PLAIN_NUM_INITS = 10
NUM_EPOCHS = 400
NUM_PROX_EPOCHS = 50
DATA_FOLDER = "cumida/_output"
DATASETS = list(DATA_DICT.keys())
LAYERS = [5]
INPUT_PENS = np.power(5., np.arange(-5,-2)).tolist()
FULL_TREE_PENS = np.power(5., np.arange(-6,-2)).tolist()

nest.add_aggregate("dataset_results", list)
nest.add_aggregate("network_structs", list)
nest.add(
    'dataset',
    DATASETS)

nest.add_aggregate("model_results", list)

nest.add(
    'seed',
    [1],
    label_func=lambda c: 'seed_%d' % int(c))

@nest.add_target_with_env(localenv)
def make_fold_splits(env, outdir, c):
    targets = [
        join(outdir, 'fold_idxs.pkl')]
    cmd = [
        'python make_fold_idxs.py',
        '--seed',
        c['seed'],
        '--data',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--k-fold',
        KFOLD,
	'--out ${TARGETS[0]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add_aggregate('easier_net_res', list)
nest.add_aggregate('sier_net_res', list)

nest.add(
    'layers',
    LAYERS,
    label_func=lambda c: 'layers_%d' % c)

nest.add(
    'input_pen',
    INPUT_PENS,
    label_func=lambda c: 'input_pen_%.8f' % c)

nest.add(
    'full_tree_pen',
    FULL_TREE_PENS,
    label_func=lambda c: 'full_tree_pen_%.8f' % c)


@nest.add_target_with_env(localenv)
def fit_init_easier_net(env, outdir, c):
    out_model_file = join('cumida', outdir, 'init_easier_net.pt')
    targets = [
        join(outdir, 'init_easier_net_more_log.txt'),
        join(outdir, 'eval_easiernet_more.json'),
        join(outdir, 'eval_siernet_more.json')]
    c['easier_net_res'].append(targets[1])
    c['sier_net_res'].append(targets[2])
    cmd_arg = [
        'python fit_easier_net.py',
        '--data',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--fold ${SOURCES[0]}',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--seed',
        c['seed'],
        '--num-inits',
        NUM_INITS,
        '--n-layers',
        c['layers'],
        '--n-hidden 100',
        '--num-batches 3',
        '--max-iters',
        NUM_EPOCHS,
        '--max-prox-iters',
        NUM_PROX_EPOCHS,
        '--input-filter',
        '--input-pen',
        c["input_pen"],
        '--full-tree-pen',
        c['full_tree_pen'],
        '--n-jobs 4',
	'--out-model-file',
        out_model_file,
	'--log-file ${TARGETS[0]}']
    cmd_arg_str = "'%s'" % ' '.join(map(str, cmd_arg))
    cmd1 = [
        'python execute.py',
        '--clusters',
        localenv['clusters'],
        "${TARGETS[0]}",
        cmd_arg_str,
        ]
    cmd2 = [
        'python evaluate_ensemble_easier_net_folds.py',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        out_model_file,
        '--fold ${SOURCES[0]}',
	'--out-file ${TARGETS[1]}'
    ]
    cmd3 = [
        'python evaluate_siernet_folds.py',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        out_model_file,
        '--fold ${SOURCES[0]}',
	'--out-file ${TARGETS[2]}'
    ]
    cmd4 = [
        'rm',
        out_model_file,
    ]
    cmd = cmd1 + [";"] + cmd2 + [";"] + cmd3 + [";"] + cmd4
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

nest.pop('layers')

@nest.add_target_with_env(localenv)
def select_sier_net(env, outdir, c):
    targets = [
        join(outdir, 'selected_siernet_more.json'),
        join(outdir, 'selected_siernet_more_log.txt')]
    template = join("cumida", c['sier_net_res'][0].replace(
        	"layers_%d/input_pen_%.8f/full_tree_pen_%.8f/" % (LAYERS[0], INPUT_PENS[0], FULL_TREE_PENS[0]),
                "layers_%d/input_pen_%.8f/full_tree_pen_%.8f/"))
    cmd = [
        'python collate_best_param.py',
        '--template',
        '"%s"' % template,
        '--layer',
        ",".join(map(str, LAYERS)),
        '--input-pen',
        ",".join(map(str, INPUT_PENS)),
        '--full',
        ",".join(map(str, FULL_TREE_PENS)),
        '--seed',
        c['seed'],
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['make_fold_splits'] + c['sier_net_res'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_final_siernet(env, outdir, c):
    targets = [
        join(outdir, 'final_siernet_more.pt'),
        join(outdir, 'final_siernet_more_log.txt')]
    cmd_arg = [
        'python fit_easier_net.py',
        '--data',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--num-classes',
        DATA_DICT[c['dataset']]['class'],
        '--seed',
        c['seed'] + 123,
        '--n-hidden 100',
        '--num-batches 3',
        '--max-iters',
        NUM_EPOCHS,
        '--max-prox-iters',
        NUM_PROX_EPOCHS,
        '--input-filter',
        '--model-fit-params',
        '${SOURCES[0]}',
        '--out-model-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    cmd = cmd_arg
    return env.Command(
        targets,
        c['select_sier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_siernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_siernet_more.csv'),
        join(outdir, 'eval_siernet_more_log.txt')]
    c['model_results'].append(targets[0])
    cmd = [
        'python evaluate_model.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]} easier_net',
        '--model-name SIER-net',
        '--num-classes',
        DATA_DICT[c['dataset']]['class'],
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_final_siernet'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def select_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'selected_easier_net_more.json'),
        join(outdir, 'selected_easier_net_more_log.txt')]
    template = join("cumida", c['easier_net_res'][0].replace(
		"layers_%d/input_pen_%.8f/full_tree_pen_%.8f/" % (LAYERS[0], INPUT_PENS[0], FULL_TREE_PENS[0]),
                "layers_%d/input_pen_%.8f/full_tree_pen_%.8f/"))
    cmd = [
        'python collate_best_param.py',
        '--template',
        '"%s"' % template,
        '--layer',
        ",".join(map(str, LAYERS)),
        '--input-pen',
        ",".join(map(str, INPUT_PENS)),
        '--full',
        ",".join(map(str, FULL_TREE_PENS)),
        '--seed',
        c['seed'],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['make_fold_splits'] + c['easier_net_res'],
        ' '.join(map(str, cmd)))

nest.add_aggregate('final_models', list)
nest.add_aggregate('net_structs', list)
nest.add(
    'final_init_seed',
    range(NUM_INITS * 2),
    label_func=lambda c: 'final_init_seed_%d' % int(c))

@nest.add_target_with_env(localenv)
def fit_final_init_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'init_easier_net_more_cv.pt'),
        join(outdir, 'init_easier_net_more_cv_log.txt')]
    c['final_models'].append(targets[0])
    cmd_arg = [
        'python fit_easier_net.py',
        '--data',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--seed',
        c['seed'] + c['final_init_seed'],
        '--n-hidden 100',
        '--num-batches 3',
        '--max-iters',
        NUM_EPOCHS,
        '--max-prox-iters',
        NUM_PROX_EPOCHS,
        '--input-filter',
        '--model-fit-params',
        '${SOURCES[0]}',
	'--out-model-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    cmd_arg_str = "'%s'" % ' '.join(map(str, cmd_arg))
    cmd = [
        'python execute.py',
        '--clusters',
        localenv['clusters'],
        "${TARGETS[0]}",
        cmd_arg_str,
        ]
    return env.Command(
        targets,
        c['select_easier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_easiernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_siernet_more.csv'),
        join(outdir, 'eval_siernet_more_log.txt'),
        join(outdir, 'eval_siernet_more.json')]
    c['net_structs'].append(targets[2])
    cmd = [
        'python evaluate_model.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]} easier_net',
        '--model-name SIER-net',
        '--num-classes',
        DATA_DICT[c['dataset']]['class'],
        '--dump-net-struct',
        '--json-file ${TARGETS[2]}',
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_final_init_easier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_interactions(env, outdir, c):
    if c['final_init_seed'] > 0:
        return None

    targets = [
        join(outdir, 'contour_1d.pdf'),
        join(outdir, 'contour_2d.pdf')]
    cmd = [
        'python plot_interactions.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]}',
        '--out-1d-file ${TARGETS[0]}',
        '--out-2d-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_final_init_easier_net'],
        ' '.join(map(str, cmd)))

nest.pop('final_init_seed')

@nest.add_target_with_env(localenv)
def evaluate_ensemble_easier_net(env, outdir, c):
    template = join("cumida", c['final_models'][0].replace("/final_init_seed_0/", "/final_init_seed_*/"))
    targets = [
        join(outdir, 'eval_ensemble_easier_net_more_cv.csv'),
        join(outdir, 'eval_ensemble_easier_net_more_cv_log.txt'),
    ]
    c['model_results'].append(targets[0])
    cmd = [
        'python evaluate_ensemble.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '"%s"' % template,
        'easier_net',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--model-name easier_net',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        targets,
        c['final_models'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def get_net_struct(env, outdir, c):
    targets = [
        join(outdir, 'net_struct_summary.csv'),
        join(outdir, 'net_struct.csv'),
        join(outdir, 'support_plot.pdf')]
    c['network_structs'].append(targets[0])
    template = join("cumida", c['net_structs'][0].replace("/final_init_seed_0/", "/final_init_seed_%d/"))
    cmd = [
        'python plot_network_struct.py',
        '--nn-files',
        '"%s"' % template,
        '--dataset',
        c['dataset'],
        '--seeds',
        NUM_INITS * 2,
        '--out-file ${TARGETS[0]}',
        '--out-raw-file ${TARGETS[1]}',
        '--plot-support-file ${TARGETS[2]}']
    return env.Command(
        targets,
        c['net_structs'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_lasso(env, outdir, c):
    targets = [
        join(outdir, 'lasso_model.sav'),
        join(outdir, 'lasso_model_log.txt')]
    cmd = [
        'python fit_lasso.py',
        '--data-file',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--fold-idxs ${SOURCES[0]}',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--seed',
        c['seed'],
	'--out-model-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_lasso(env, outdir, c):
    targets = [
        join(outdir, 'eval_lasso.csv'),
        join(outdir, 'eval_lasso_log.txt'),
        join(outdir, 'lasso_struct.csv')]
    c['model_results'].append(targets[0])
    cmd = [
        'python evaluate_model.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]} scikit',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--out-struct-file ${TARGETS[2]}',
        '--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_lasso'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_rf(env, outdir, c):
    targets = [
        join(outdir, 'rf_model.sav'),
        join(outdir, 'rf_model_log.txt')]
    cmd = [
        'python fit_random_forest.py',
        '--data-file',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--num-trees 10000',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--seed',
        c['seed'],
        '--max-depths 2,5,10',
        '--fold ${SOURCES[0]}',
	'--out-model-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_rf(env, outdir, c):
    targets = [
        join(outdir, 'eval_rf.csv'),
        join(outdir, 'eval_rf_log.txt')]
    c['model_results'].append(targets[0])
    cmd = [
        'python evaluate_model.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]} scikit',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_rf'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_xgb(env, outdir, c):
    targets = [
        join(outdir, 'xgb_model.json'),
        join(outdir, 'xgb_model_log.txt')]
    cmd = [
        'srun --cpus-per-task 8 --exclude=gizmoe1,gizmoe2',
        'python fit_xgboost.py',
        '--data',
        "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
        '--fold-idxs ${SOURCES[0]}',
        '--seed',
        c['seed'],
        '--num-rounds 2500,10000',
        '--reg-alpha 0.5',
        '--reg-lambda 0.5',
        '--max-depth 1,3,6,9',
        '--n-jobs 8',
	'--out-model-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]} &']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_xgb(env, outdir, c):
    targets = [
        join(outdir, 'eval_xgb.csv'),
        join(outdir, 'eval_xgb_log.txt')]
    c['model_results'].append(targets[0])
    cmd = [
        'python evaluate_model.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '${SOURCES[0]} xgb',
        '--num-classes',
        DATA_DICT[c['dataset']]["class"],
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_xgb'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_plain_nn(env, outdir, c):
    targets = [
        join(outdir, 'eval_ensemble_plain_nn.csv'),
        join(outdir, 'eval_ensemble_plain_nn_log.txt')]
    single_template = join("cumida", outdir, 'plain_nn_%d.pt')
    log_file = join("cumida", outdir, 'plain_nn_log.txt')
    cmd = []
    for plain_seed in range(PLAIN_NUM_INITS):
        cmd += ['python fit_plain_nn.py',
            '--data',
            "%s/%s_train.npz" % (DATA_FOLDER,c['dataset'],),
            '--num-classes',
            DATA_DICT[c['dataset']]["class"],
            '--seed',
            c['seed'] + plain_seed,
            '--fold-idxs-file ${SOURCES[0]}',
            '--n-layers 10',
            '--n-hidden 100',
            '--full-tree 0',
            '--num-batches 3',
            '--max-iters',
            NUM_EPOCHS,
            '--dropout 0.15',
	    '--out-model-file',
            single_template % plain_seed,
	    '--log-file',
            log_file,
            ';']
    template = join("cumida", outdir, 'plain_nn*.pt')
    cmd += [
        'python evaluate_ensemble.py',
        "%s/%s_test.npz" % (DATA_FOLDER,c['dataset'],),
        '"%s"' % template,
        'plain_nnet',
        '--num-classes',
        DATA_DICT[c['dataset']]['class'],
        '--model-name plain_nnet',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]};',
    ]
    for plain_seed in range(PLAIN_NUM_INITS):
        cmd += ['rm', single_template % plain_seed, ';']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

nest.pop("seed")

@nest.add_target_with_env(localenv)
def collate_struct_results(env, outdir, c):
    targets = [
        join(outdir, 'all_structs.csv'),
        join(outdir, 'all_structs_log.txt')
    ]
    template = join(
         "cumida",
         c['model_results'][0].rsplit("/", 1)[0],
         "*struct.csv")
    cmd = [
        'python collate_results.py',
        '"%s"' % template,
        '${TARGETS[0]}',
        '--groupby model_class',
        '--newcol dataset,%s' % c['dataset'],
        '--log-file ${TARGETS[1]}',
    ]
    c['dataset_results'].append(targets[0])
    return env.Command(
        targets,
        c['model_results'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def collate_results(env, outdir, c):
    targets = [
        join(outdir, 'all_res_cv.csv'),
        join(outdir, 'all_res_log.txt')
    ]
    template = join(
         "cumida",
         c['model_results'][0].rsplit("/", 1)[0],
         "eval*csv")
    cmd = [
        'python collate_results.py',
        '"%s"' % template,
        '${TARGETS[0]}',
        '--groupby model_class',
        '--newcol dataset,%s' % c['dataset'],
        '--log-file ${TARGETS[1]}',
    ]
    c['dataset_results'].append(targets[0])
    return env.Command(
        targets,
        c['model_results'],
        ' '.join(map(str, cmd)))

nest.pop("dataset")

@nest.add_target_with_env(localenv)
def collate_results_tex(env, outdir, c):
    targets = [
        join(outdir, 'all_dataset_acc_res.tex'),
    ]
    template = join(
         "cumida",
         outdir,
         "*/all_res_cv.csv")
    cmd = [
        'python collate_results.py',
        '"%s"' % template,
        '${TARGETS[0]}',
        '--pivot dataset,model_class,accuracy',
    ]
    return env.Command(
        targets,
        c['dataset_results'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def collate_supports_csv(env, outdir, c):
    targets = [
        join(outdir, 'all_dataset_supports.csv'),
    ]
    template = join(
         "cumida",
         outdir,
         "*/all_structs.csv")
    cmd = [
        'python collate_results.py',
        '"%s"' % template,
        '${TARGETS[0]}',
        '--pivot dataset,model_class,support_size',
    ]
    return env.Command(
        targets,
        c['dataset_results'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_supports_csv(env, outdir, c):
    targets = [
        join(outdir, 'support_size_hist.png'),
    ]
    template = join(
         "cumida",
         outdir,
         "*/all_structs.csv")
    cmd = [
        'python plot_logistic_easier_support_size.py ${SOURCES[0]}',
        '${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        c['collate_supports_csv'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def collate_net_structs(env, outdir, c):
    targets = [
        join(outdir, 'all_net_structs.pdf'),
        join(outdir, 'layer_v_acc.pdf')
    ]
    struct_template = join(
         "cumida",
         outdir,
         "*/all_structs.csv")
    res_template = join(
         "cumida",
         outdir,
         "*/all_res_cv.csv")
    cmd = [
        'python plot_layer_vs_accuracy.py',
        '"%s"' % struct_template,
        '"%s"' % res_template,
        '${TARGETS[0]}',
        '${TARGETS[1]}',
    ]
    return env.Command(
        targets,
        c['network_structs'],
        ' '.join(map(str, cmd)))
